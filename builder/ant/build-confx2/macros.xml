<project name="macros" basedir="."  xmlns:ivy="antlib:org.apache.ivy.ant" >

    <macrodef name="compcMacroX2"
              description="macro definition to compile IInqure Flex libraries">
        <attribute name="releaseType" default="unstable"/>
        <attribute name="lib.path" default="${basedir}/lib/swc/" />
        <attribute name="matrix.include"  default="${runtime.m3}" />
        <attribute name="matrix.exclude" default="${runtime.m2}" />
        <attribute name="sourcePath"  default="${dir.flex.src}" />
        <attribute name="outputDir" default="${dir.bin}" />
        <attribute name="debug"   default="false" />
        <attribute name="warnings"   default="false" />
        <attribute name="optimize"   default="false" />
        <attribute name="linkReport"  default="reports/link-report.xml" />
        <attribute name="classesPath" default="${project_classes_property}"   />
        <sequential>

            <echo>building ${ant.project.name} with version::: ${project.version}</echo>


            <compc output="@{outputDir}/${ant.project.name}-@{matrix.include}-${project.version}.swc"
                   debug="@{debug}" locale="en_US" warnings="@{warnings}"
                   include-classes="@{classesPath}">
                <theme dir="${FLEX_HOME}/frameworks/themes/Halo">
                    <include name="halo.swc" />
                </theme>
                <load-config filename="${FLEX_HOME}/frameworks/flex-config.xml"/>
                <define name="CONFIG::dev"
                        value="false"/>
                <define name="CONFIG::release"
                        value="true"/>

                <define name="VERSION::major" value="${project.version.major}"/>
                <define name="VERSION::minor" value="${project.version.minor}"/>
                <define name="VERSION::feature" value="${project.version.feature}"/>
                <define name="VERSION::patch" value="${project.version.patch}"/>
                <define name="VERSION::build_number" value="${project.version.next.buildnumber}"/>
                <define name="VERSION::release_type" value="'@{releaseType}'"/>

                <source-path path-element="${dir.flex.src}"/>

                <compiler.external-library-path dir="${flex3sdk.lib.dir}"
                                                append="true">

                    <include name="*"/>
                </compiler.external-library-path>
                <!--  if projects  external swc dependencies  -->
                <compiler.external-library-path dir="@{lib.path}" append="true">
                    <include name="@{matrix.include}/*" />
                    <exclude name="@{matrix.exclude}/*" />
                </compiler.external-library-path>
            </compc>


        </sequential>
    </macrodef>


    <macrodef name="ui-compile-module"
              description="A convenience macro definition to transitively copy the artifact from the source repository to a target">
        <attribute name="module"  />
        <attribute name="ext"   default="as"/>
        <attribute name="sourcePath"  default="${dir.flex.src}" />
        <attribute name="outputDir"   default="$[dir.bin}" />
        <attribute name="debug"   default="false" />
        <attribute name="optimize"   default="false" />
        <attribute name="linkReport"  default="${dir.reports}/link-report.xml" />

        <sequential>
            <mxmlc
                    file="@{module}.@{ext}"
                    output="@{outputDir}/@{module}.swf"
                    debug="@{debug}"
                    optimize="@{optimize}"
                    load-externs="@{linkReport}"
                    locale="en_US"
                    >

                <compiler.context-root>/lev</compiler.context-root>
                <source-path path-element="@{sourcePath}" />
                <library-path dir="${FLEX_HOME}/frameworks/libs" append="true">
                    <include name="*.swc" />
                </library-path>

                <library-path dir="${FLEX_HOME}/frameworks/locale" append="true">
                    <include name="{locale}" />
                </library-path>
                <library-path dir="${dir.lib}" append="true">
                    <include name="*.swc" />
                </library-path>
            </mxmlc>


        </sequential>
    </macrodef>


    <macrodef name="mxmlcMacro"
              description="macro definition to compile IInqure Flex libraries">
        <attribute name="releaseType" default="PROD"/>
        <attribute name="lib.path" default="${basedir}/lib/swc/" />
        <attribute name="matrix.include"  default="3" />
        <attribute name="src.dir" default="${flex.src}/status" />
        <attribute name="fileName" default="${${ant.project.name}" />
        <attribute name="outputDir"  default="${dir.distrib}" />
        <attribute name="debug" description="debug enabled" default="false" />
        <attribute name="benchmark" description="debug enabled" default="true" />
        <attribute name="warnings" description="warnings" default="false" />
        <sequential>

            <echo>building ${ant.project.name} with version::: ${project.version}</echo>

            <mxmlc file="@{src.dir}/@{fileName}.mxml"
                   strict="true"  benchmark="@{benchmark}"
                   output="@{outputDir}/@{fileName}.swf"
                   debug="@{debug}" warnings="@{warnings}"
                   headless-server="true" isolate-styles="false">
                <theme dir="${FLEX_HOME}/frameworks/themes/Halo">
                    <include name="halo.swc" />
                </theme>
                <locale>en_US</locale>
                <load-config filename="${FLEX_HOME}/frameworks/flex-config.xml" />
                <source-path path-element="${flex.src}/locale/en_US" />
                <source-path path-element="${FLEX_HOME}/frameworks" />
                <source-path path-element="${flex.src}/resources" />

                <compiler.library-path dir="@{lib.path}/m@{matrix.include}" append="true">
                    <include name="**/**.swc" />
                </compiler.library-path>
                <define name="CONFIG::dev"
                        value="false"/>
                <define name="CONFIG::release"
                        value="true"/>

                <define name="VERSION::major" value="${project.version.major}"/>
                <define name="VERSION::minor" value="${project.version.minor}"/>
                <define name="VERSION::feature" value="${project.version.feature}"/>
                <define name="VERSION::patch" value="${project.version.patch}"/>
                <define name="VERSION::build_number" value="${project.version.next.buildnumber}"/>
                <define name="VERSION::release_type" value="'@{releaseType}'"/>
            </mxmlc>
        </sequential>
    </macrodef>


    <macrodef name="compcMacro"
              description="macro definition to compile IInqure Flex libraries">
        <attribute name="releaseType" default="PROD"/>
        <attribute name="lib.path" default="${basedir}/lib/swc/" />
        <attribute name="matrix.include"  default="3" />
        <attribute name="matrix.exclude" default="2" />
        <attribute name="sourcePath" description="source" default="${dir.flex.src}" />
        <attribute name="outputDir" description="source" default="${dir.bin}" />
        <attribute name="debug" description="debug enabled" default="false" />
        <attribute name="warnings" description="warnings" default="false" />
        <attribute name="optimize" description="optimized" default="false" />
        <attribute name="linkReport"  default="reports/link-report.xml" />
        <attribute name="classesPath" default="${project_classes_property}"   />
        <sequential>

            <echo>building ${ant.project.name} with version::: ${project.version}</echo>


            <compc output="@{outputDir}/${ant.project.name}-@{matrix.include}.${project.version}.swc"
                   debug="@{debug}" locale="en_US" warnings="@{warnings}"
                   include-classes="@{classesPath}">
                <theme dir="${FLEX_HOME}/frameworks/themes/Halo">
                    <include name="halo.swc" />
                </theme>
                <load-config filename="${FLEX_HOME}/frameworks/flex-config.xml"/>
                <define name="CONFIG::dev"
                        value="false"/>
                <define name="CONFIG::release"
                        value="true"/>

                <define name="VERSION::major" value="${project.version.major}"/>
                <define name="VERSION::minor" value="${project.version.minor}"/>
                <define name="VERSION::feature" value="${project.version.feature}"/>
                <define name="VERSION::patch" value="${project.version.patch}"/>
                <define name="VERSION::build_number" value="${project.version.next.buildnumber}"/>
                <define name="VERSION::release_type" value="'@{releaseType}'"/>

                <source-path path-element="${dir.flex.src}"/>

                <compiler.external-library-path dir="${flex3sdk.lib.dir}"
                                                append="true">

                    <include name="*"/>
                </compiler.external-library-path>
                <!--  if projects  external swc dependencies  -->
                <compiler.external-library-path dir="@{lib.path}" append="true">
                    <include name="m@{matrix.include}/*" />
                    <exclude name="m@{matrix.exclude}/*" />
                </compiler.external-library-path>
            </compc>


        </sequential>
    </macrodef>


    <macrodef name="ui-compile-app"
              description="A convenience macro definition to transitively copy the artifact from the source repository to a target">
        <attribute name="app" description="app"/>
        <attribute name="ext"   default="as"/>
        <attribute name="sourcePath" description="source" default="${dir.flex.src}" />
        <attribute name="outputDir" description="source" default="$[dir.bin}" />
        <attribute name="debug" description="debug enabled" default="false" />
        <attribute name="optimize" description="optimized" default="false" />
        <attribute name="linkReport"  default="${dir.reports}/link-report.xml" />
        <attribute name="services"   />
        <sequential>
            <mxmlc
                    file="@{app}.@{ext}"
                    output="@{outputDir}/@{app}.swf"
                    debug="@{debug}"
                    optimize="@{optimize}"
                    link-report="@{linkReport}"
                    locale="en_US" services="@{services}"
                    >

                <define name="CONFIG::dev" value="false" />
                <define name="CONFIG::release" value="true" />
                <compiler.context-root>/lev</compiler.context-root>
                <source-path path-element="@{sourcePath}" />
                <library-path dir="${FLEX_HOME}/frameworks/libs" append="true">
                    <include name="*.swc" />
                </library-path>

                <library-path dir="${FLEX_HOME}/frameworks/locale" append="true">
                    <include name="{locale}" />
                </library-path>
                <include-libraries dir="${dir.lib}" append="true">
                    <include name="*.swc" />
                </include-libraries>
            </mxmlc>


        </sequential>
    </macrodef>

    <!--
        ++ =======================================================================
        ++ Macro: compileLocale
        ++ Compiles the Resource package for the given locale.
        ++ =======================================================================
    -->
    <macrodef name="compileLocale" description="Compiles the Resource package for the given locale">
        <attribute name="locale" default="en_US"/>
        <sequential>
            <!--
                Create the Flex Home directory for the language in question.
                This is necessary to compensate for a bug in pre-3.2 releases of
                mxmlc.
            -->
            <mkdir dir="${FLEX_HOME}/frameworks/locale/@{locale}"/>

            <!-- Invoke MXMLC -->
            <mxmlc output="${basedir}/src/locale/@{locale}.swf" keep-all-type-selectors="true" >
                <locale>@{locale}</locale>
                <source-path path-element="src/locale/{locale}"/>
                <source-path path-element="${FLEX_HOME}/frameworks"/>
                <compiler.theme file="${FLEX_HOME}/frameworks/themes/Halo/halo.swc" />
                <load-config filename="${FLEX_HOME}/frameworks/flex-config.xml"/>
                <include-resource-bundles>SharedResources</include-resource-bundles>
                <include-resource-bundles>ServiceCenter</include-resource-bundles>
                <include-resource-bundles>collections</include-resource-bundles>
                <include-resource-bundles>components</include-resource-bundles>
                <include-resource-bundles>containers</include-resource-bundles>
                <include-resource-bundles>controls</include-resource-bundles>
                <include-resource-bundles>core</include-resource-bundles>
                <include-resource-bundles>effects</include-resource-bundles>
                <include-resource-bundles>formatters</include-resource-bundles>
                <include-resource-bundles>layout</include-resource-bundles>
                <include-resource-bundles>logging</include-resource-bundles>
                <include-resource-bundles>messaging</include-resource-bundles>
                <include-resource-bundles>rpc</include-resource-bundles>
                <include-resource-bundles>skins</include-resource-bundles>
                <include-resource-bundles>styles</include-resource-bundles>
                <include-resource-bundles>textLayout</include-resource-bundles>
                <include-resource-bundles>validators</include-resource-bundles>

            </mxmlc>

        </sequential>
    </macrodef>

    <macrodef name="compileLocaleSWC" description="Compiles the Resource package for the given locale">
        <attribute name="locale" default="en_US"/>
        <sequential>
            <!--
                Create the Flex Home directory for the language in question.
                This is necessary to compensate for a bug in pre-3.2 releases of
                mxmlc.
            -->

            <!-- Invoke MXMLC -->
            <compc output="${basedir}/bin/@{locale}.swc"
                   debug="${flex.debug}" locale="en_US"  warnings="false"  >
                <theme dir="${FLEX_HOME}/frameworks/themes/Halo">
                    <include name="halo.swc" />
                </theme>
                <load-config filename="${FLEX_HOME}/frameworks/flex-config.xml"/>

                <source-path path-element="src/locale/{locale}"/>
                <source-path path-element="${FLEX_HOME}/frameworks"/>
                <include-resource-bundles>SharedResources</include-resource-bundles>
                <include-resource-bundles>ServiceCenter</include-resource-bundles>
                <include-resource-bundles>collections</include-resource-bundles>
                <include-resource-bundles>components</include-resource-bundles>
                <include-resource-bundles>containers</include-resource-bundles>
                <include-resource-bundles>controls</include-resource-bundles>
                <include-resource-bundles>core</include-resource-bundles>
                <include-resource-bundles>effects</include-resource-bundles>
                <include-resource-bundles>formatters</include-resource-bundles>
                <include-resource-bundles>layout</include-resource-bundles>
                <include-resource-bundles>logging</include-resource-bundles>
                <include-resource-bundles>messaging</include-resource-bundles>
                <include-resource-bundles>rpc</include-resource-bundles>
                <include-resource-bundles>skins</include-resource-bundles>
                <include-resource-bundles>styles</include-resource-bundles>
                <include-resource-bundles>textLayout</include-resource-bundles>
                <include-resource-bundles>validators</include-resource-bundles>

            </compc>



        </sequential>
    </macrodef>


    <target name="publishTarget" >
        <if>
            <equals arg1="${snapx}" arg2="true" />
            <then>

                <echo>[BEFORE]project version ${revision}</echo>
                <echo>[BEFORE]project version ${project.version}</echo>
                <property name="project.version" value="${project.version.major}.${project.version.minor}.${project.version.feature}.${project.version.patch}.${project.version.next.buildnumber}-SNAPSHOT"/>
                <property name="revision" value="${project.version.major}.${project.version.minor}.${project.version.feature}.${project.version.patch}.${project.version.next.buildnumber}-SNAPSHOT"/>

                <echo>[AFTER]project version ${project.version}</echo>
                <echo>Publishing via Macro publishMacro</echo>
                <property name="skip.autonumber" value="true" />
                <publishMacro  resolver="${resolverx}-snap"  />
            </then>
            <else>
                <echo>[BEFORE]project version ${revision}</echo>
                <echo>[BEFORE]project version ${project.version}</echo>
                <property name="project.version" value="${project.version.major}.${project.version.minor}.${project.version.feature}.${project.version.patch}.${project.version.next.buildnumber}"/>
                <property name="revision" value="${project.version.major}.${project.version.minor}.${project.version.feature}.${project.version.patch}.${project.version.next.buildnumber}"/>

                <echo>[AFTER]project version ${project.version}</echo>
                <echo>Publishing via Macro publishMacro</echo>
                <publishMacro  resolver="${resolverx}"/>
            </else>
        </if>

    </target>

    <macrodef name="publishMacro"
              description="macro definition to compile IInqure Flex libraries">

        <attribute name="resolver" default="iinqtech-shared"/>
        <attribute name="overwrite" default="true"/>
        <attribute name="update" default="true"/>
        <attribute name="status" default="${project.status}"/>


        <sequential>

            <echo>

                <![CDATA[
              ############################################################
              ###### publishx ${ant.project.name}
              ###### publishing  to @{resolver}
              ###### project ${ant.project.name}| with version ${project.version}
              ###### ivy.new.revision =${ivy.new.revision}
              ############################################################
            ]]>
            </echo>
            <antcall target="package" />
            <ivy:publish  resolver="@{resolver}" overwrite="true" update="true" artifactspattern="${dir.distrib}/[artifact]-[revision].[ext]"
                          pubrevision="${project.version}" srcivypattern="${dir.distrib}/[type]s/ivy-[module]-[revision].[ext]"
                          status="${project.status}" >

            </ivy:publish>
            <echo message="project ${ant.project.name} released with version ${revision}"/>
            <echo message="project ${ant.project.name} released with version ${project.version} to to @{resolver}"/>
            <propertyfile file="${basedir}/version.properties" >
                <entry key="publish.version" value="${project.version}"/>
                <entry key="publish.date" value="now"/>
                <entry key="publish.by" value="user: ${user.name}"/>
            </propertyfile>

        </sequential>
    </macrodef>

</project>