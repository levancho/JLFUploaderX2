<project name="jacoco-coverage" xmlns:jacoco="antlib:org.jacoco.ant"   basedir="."
         xmlns:ivy="antlib:org.apache.ivy.ant">

    <dirname property="jacoco.basedir" file="${ant.file.jacoco-coverage}"/>

    <property name="build.jars.dir" value="${jacoco.basedir}/../lib"/>
    <property name="junit.fork" value="yes"/>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${build.jars.dir}/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath>
            <pathelement location="${build.jars.dir}/jacocoant.jar"/>
        </classpath>
    </taskdef>


    <property name="result.dir" location="${dir.reports}/jacoco"/>
    <property name="result.classes.dir" location="${result.dir}/classes"/>
    <property name="result.report.dir" location="${basedir}/.sonar/"/>
    <property name="result.exec.file" location="${dir.reports}/jacoco.exec"/>
    <property name="sonar.core.codeCoveragePlugin" value="jacoco"/>
    <property name="sonar.jacoco.reportPath" value="${result.exec.file}"/>
    <property name="sonar.jacoco.excludes" value="oracle.*"/>
    <!-- sugar target -->

    <property name="dir.jacoco.reports" value="${basedir}/jacoco-reports"/>
    <!-- Surefire reports will be added to this directory -->
    <property name="dir.test.reports" value="${dir.jacoco.reports}/test-reports"/>
    <!-- Location of test sources directory -->
    <property name="dir.test.src" value="${dir.src.test}"/>

    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath>
            <pathelement location="${build.jars.dir}/jacocoant.jar"/>
        </classpath>
    </taskdef>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${build.jars.dir}/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <target name="test" depends="compile-tests" description="target used to run tests" unless="skip.coverage" >
        <echo>
            <![CDATA[
                  #################################################
                  ########### Running ${ant.project.name} tests  ##
                  #################################################
                ]]>
        </echo>

        <echo>Running JUnit classes: ${test}</echo>
        <junit fork="${junit.fork}" printsummary="yes" haltonfailure="false">
            <classpath>
                <path refid="build.class.path"/>
                <path refid="tests.class.path"/>
                <path refid="junit.path"/>
            </classpath>

            <formatter type="brief" usefile="true"/>
            <formatter type="plain"/>
            <formatter type="xml"/>

            <batchtest todir="${dir.reports}">
                <fileset dir="${dir.classes}" includes="**/${test}.class"/>
                <fileset dir="${dir.src.test}">
                    <include name="**/*Test*.java"/>
                </fileset>
                <fileset dir="${dir.resources.test}">
                    <include name="**/**"/>
                    <exclude name="**/jmeter.xml"/>
                    <exclude name="**/log4j.properties"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="junit" depends="compile-tests" unless="skip.coverage" >
        <echo>build.class.path is ${build.class.path}</echo>
        <echo>tests.class.path is ${tests.class.path}</echo>

        <junit printsummary="yes" haltonfailure="no">

            <!--
                <classpath location="lib/junit-4.11.jar" />
                <classpath location="lib/hamcrest-core-1.3.jar" />
            -->
            <classpath>
                <path refid="build.class.path"/>
                <path refid="tests.class.path"/>
            </classpath>

            <formatter type="xml" />
            <formatter type="plain" />

            <batchtest fork="yes" todir="${dir.reports}">
                <fileset dir="${dir.src.test}">
                    <include name="**/*Test*.java" />
                </fileset>
            </batchtest>

        </junit>
    </target>



    <target name="jcompile"   unless="skip.coverage"  depends="coverage-report" />


    <!-- ##################################################################################### -->
    <!-- ##################################################################################### -->
    <!-- Provide the location of Jar files -->
    <!--<property name="dir.lib" value="" />-->
    <!-- Location of source code directory -->
    <!--<property name="dir.src" value="" />-->
    <!-- Location of source code directory
    <property name="dir.src" value="" /> -->
    <!-- Location of classes directory -->
    <!--<property name="dir.classes" value="" />-->
    <!-- JaCoCo installtion directory -->
    <!--<property name="jacoco.dir" value="" />-->
    <!-- Reports will get generated in this directory -->
    <property name="dir.jacoco.reports" value="${basedir}/jacoco-reports"/>
    <!-- Surefire reports will be added to this directory -->
    <property name="dir.test.reports" value="${dir.jacoco.reports}/test-reports"/>
    <!-- Location of test sources directory -->
    <property name="dir.test.src" value="${dir.src.test}"/>
    <!-- Location of test classes directory -->
    <!--<property name="dir.test.classes" value=""/>-->
    <!-- ##################################################################################### -->
    <!-- #################
    #################################################################### -->

    <!-- This target will execute testcases -->
    <target name="coverage-report" description="Perfrom JUnit testing"  depends="compile-tests"  unless="skip.coverage" >
        <!-- Execute testcases -->
        <jacoco:coverage destfile="${dir.jacoco.reports}/jacoco.exec">
            <junit fork="true" forkmode="once" printsummary="on" dir="." >

                <classpath>
                    <path refid="build.class.path"/>
                    <path refid="tests.class.path"/>
                    <path refid="junit.path"/>
                    <pathelement location="${dir.classes}"/>
                    <pathelement location="${dir.test.classes}"/>
                </classpath>

                <formatter type="brief" usefile="true" />
                <formatter type="plain" usefile="true"/>
                <formatter type="xml" usefile="true"/>

                <batchtest todir="${dir.test.reports}" errorProperty="test.failed" failureProperty="test.failed" >
                    <fileset dir="${dir.test.src}">
                        <include name="**/*Test.java"/>
                        <include name="**/*Test*.java"/>
                        <include name="**/test/*.java"/>
                    </fileset>
                </batchtest>
            </junit>
        </jacoco:coverage>

    </target>


    <target name="jacooco-report" depends="coverage-report" unless="skip.coverage" >

        <jacoco:report>

            <jacoco:executiondata>
                <file file="${result.exec.file}"/>
            </jacoco:executiondata>

            <jacoco:structure name="${ant.project.name} Project">
                <classfiles>
                    <fileset dir="${dir.classes}"/>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${dir.src}"/>
                    <fileset dir="${dir.src.test}"/>
                </sourcefiles>
            </jacoco:structure>

            <jacoco:html destdir="${result.dir}/report"/>

        </jacoco:report>

    </target>

</project>
