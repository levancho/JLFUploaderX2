<project name="ui-bootstrap" basedir="." >

	<property name="dir.flex.app" value="${basedir}" />
	<property name="flex.src" value="${dir.flex.app}/src" />
	<property name="dir.flex.src" value="${flex.src}" />


	<property name="dir.flex.config" value="bin" />

	<!-- Threading Properties -->
		<property name="threads.maximum" value="4" />
		<property name="EXT_APP" value="" />
		

	    <!-- Import Flex Ant Tasks. -->
		<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />


	


	<property name="client.properties"
				  value="client-properties"/>
		

	<property name="flex3sdk.bin.dir"
			  value="${FLEX_HOME}/bin"/>
	<property name="flex3sdk.lib.dir"
			  value="${FLEX_HOME}/frameworks/libs"/>

	<property name="compc.exe"
			  value="${FLEX_HOME}/bin/compc"/>
	
	<property name="asdoc.exe"
			  value="${FLEX_HOME}/bin/asdoc"/>
	
	<property name="project.title"
			  value="Lev"/>
	<property name="project.distname"
			  value="lev-client-${app.version}"/>

	<property name="APP_ROOT"
			  value="${basedir}"/>


	<property name="dir.docs"
			  value="${basedir}/docs"/>


	<property name="threads.maximum" value="4" />
	<property name="dir.bin" value="bin" />

	<taskdef resource="flexTasks.tasks"
			 classpath="${FLEX_HOME}/ant/lib/flexTasks.jar"/>

	<target name="-ui-pre-compile" />
	<target name="ui-compile"
			depends="-ui-pre-compile,ui-properties,-resolve-class-path"
			description="compile  general lib">
		<compc output="${dir.build}/${project.distname}.swc" debug="${flex.debug}"
			   include-classes="${project_classes_property}">
			<source-path path-element="${dir.flex.src}"/>
			<compiler.external-library-path dir="${flex3sdk.lib.dir}"
											append="true">
				<include name="*"/>
			</compiler.external-library-path>
			<!--  if projects  external swc dependencies  -->
			<!-- compiler.external-library-path dir="${extern.lib}"
											append="true" >
				<include name="*"/>
			</compiler.external-library-path -->
		
		</compc>
	</target>


	 <target name="compileM2" description="Creating Matrix 3 Compartible Distribution" depends="load,__compDep" >
				<compcMacro matrix.exclude="3" matrix.include="2"  releaseType="UAT" debug="${flex.debug}"  />
	</target>
	 <target name="compileM3"  description="Creating Matrix 2 Compartible Distribution" depends="load,__compDep" >
				<compcMacro releaseType="UAT" debug="${flex.debug}" />
	</target>


	<target name="compileM2x2" description="Creating Matrix 3 Compartible Distribution" depends="__compDep" >
		<property name="project.version" value="${project.version.major}.${project.version.minor}.${project.version.feature}.${project.version.patch}.${project.version.next.buildnumber}-SNAPSHOT"/>

		<compcMacroX2 matrix.exclude="${runtime.m3}" matrix.include="${runtime.m2}"  releaseType="UAT" debug="${flex.debug}"  />
	</target>
	<target name="compileM3x2"  description="Creating Matrix 2 Compartible Distribution" depends="__compDep" >
		<property name="project.version" value="${project.version.major}.${project.version.minor}.${project.version.feature}.${project.version.patch}.${project.version.next.buildnumber}-SNAPSHOT"/>

		<compcMacroX2 releaseType="UAT" debug="${flex.debug}" />
	</target>


	
	<target name="__compDep"
				depends="-ui-pre-compile,ui-properties,-resolve-class-path"
				description="compile giv framework lib">
			
	</target>
	
	
	
	
	<target name="__compileM2"
				depends="-ui-pre-compile,ui-properties,-resolve-class-path"
				description="compile giv framework lib">
			<compc output="${dir.bin}/${ant.project.name}-2.${project.version}.swc"
				   include-classes="${project_classes_property}">
					<theme dir="${FLEX_HOME}/frameworks/themes/Halo">
					            <include name="halo.swc" />
								</theme>
				<load-config filename="${FLEX_HOME}/frameworks/flex-config.xml"/>
				<define name="CONFIG::dev"
						value="true"/>
				<define name="CONFIG::release"
						value="false"/>

				<!--define name="VERSION::major" value="0"/>
				<define name="VERSION::minor" value="1"/>
				<define name="VERSION::feature" value="1"/>
				<define name="VERSION::patch" value="1"/>
				<define name="VERSION::build_number" value="123"/>
				<define name="VERSION::release_type" value="d"/ -->
				<locale>en_US</locale>
				<source-path path-element="${dir.flex.src}"/>
				<compiler.external-library-path dir="${flex3sdk.lib.dir}"
												append="true">


					<include name="*"/>
				</compiler.external-library-path>
				<!--  if projects  external swc dependencies  -->
			  <compiler.external-library-path dir="${basedir}/lib/swc/" append="true">
			  		<exclude name="m3/*" />
			  		<include name="m2/*" />
	            </compiler.external-library-path>
			</compc>
	</target>


	
	<!-- Check timestamp on files -->
	<target name="-ui-prepare">
		
		<echo>asdoc.exe: [${asdoc.exe}] </echo>
		<fail unless="asdoc.exe">The "asdoc.exe" property must be set in
			${build.dir}/build.properties.</fail>
		<fail unless="FLEX_HOME">The "FLEX_HOME" property must be set in
			${build.dir}/build.properties.</fail>
		<fail unless="compc.exe">The "compc.exe" property must be set in
			${build.dir}/build.properties.</fail>
		<tstamp/>
		<echo>--------------------------------------------
		</echo>
		<echo> FSA FLEX BUILDER             </echo>
		<echo>--------------------------------------------
		</echo>
		<echo>Flex Home: [${FLEX_HOME}] </echo>
		<echo>Flex Bin Dir: [${flex3sdk.bin.dir}] </echo>
		<echo>Flex Lib Dir: [${flex3sdk.lib.dir}] </echo>


		<mkdir dir="${dir.distrib}"/>
		<mkdir dir="${dir.lib}" />
	</target>
	<target name="ui-properties"
			depends="-ui-prepare">

	</target>
	


	<!-- TODOs package documentation -->
	<target name="ui-docs"
			depends="ui-properties,-resolve-class-path">
		<!--
			 Clean out the contents of the doc directory, without deleting "docs"
		-->

		<delete includeemptydirs="true"
				failonerror="false">
			<fileset dir="${dir.docs}"
					 includes="**/*"/>
		</delete>

		<exec executable="${asdoc.exe}"
			  failonerror="true">
			<arg line="-source-path ${dir.flex.src}"/>
			<arg line="-namespace ${manifest.uri} ${manifest.xml}"/>
			<!-- Document all of the classes in the "src" tree -->
			<arg line="-doc-sources '${dir.flex.src}' "/>

			<!-- Place the documentation in the "docs" directory -->
			<arg line="-o '${dir.docs}'"/>

			<arg line="-external-library-path='${flex3sdk.lib.dir}'"/>
			<arg line="-external-library-path+='${extern.lib}'"/>

			<!-- Include the library name in the window title -->
			<arg line="-window-title '${project.title}' "/>

			<arg line="-templates-path '${flexsdk.templates.dir}' "/>
			<arg line="-footer 'Flex Shell Framework Copyright 2009 Flex-Shell http://flexshell.riaforge.org / http://www.apache.org/licenses/LICENSE-2.0'"/>

		</exec>
	</target>



    <target name="clean-distro"  description="deletes, content of ${dir.bin} ">
        <echo>
            <![CDATA[
              ###########################################
              ###### clean-bin ${ant.project.name}  #####
              ###### deleting ${dir.distrib}      ###########
            ]]>
        </echo>

        <if>
            <available file="${dir.distrib}" type="dir" />
            <then>
                <delete includeemptydirs="true" failonerror="false" >
                    <fileset dir="${dir.distrib}" includes="**/*">
                    </fileset>
                </delete>
            </then>
            <else>
                <echo message="${dir.distrib} Directory does not exist" />
            </else>
        </if>


    </target>


	<target name="-resolve-class-path">
		<path id="list_1">
			<fileset dir="${basedir}/src">
				<include name="com/**"/>
				<include name="**"/>
				<exclude name="**/Test*"/>
			</fileset>
		</path>
		<pathconvert property="project_classes_property"
					 pathsep=" "
					 dirsep="."
					 refid="list_1">
			<map from="${basedir}/src/"
				 to=""/>
			<mapper>
				<chainedmapper>
					<globmapper from="*.mxml"
								to="*"/>
				</chainedmapper>
				<chainedmapper>
					<globmapper from="*.as"
								to="*"/>
				</chainedmapper>
			</mapper>
		</pathconvert>
		<echo>${project_classes_property}</echo>
	</target>
	
	


    <target name="Help-All" description="Display help text">
        <echo>

            <![CDATA[
			
		==============================================================================

	
		
		==============================================================================
			 ]]>
        </echo>
    </target>


    <!-- #################### Internal Targets Only #################### -->
    <!-- es targeti avtomaturad sheqmnis  Version String
         da ertit gazrdis versiebis cifrebs da shemdeg daakopirebs ${levancho.info} filshi-->
    <!-- Check timestamp on files -->


    <!-- Public targets -->
  

</project>
